name: macos-11
on:
  workflow_dispatch:
    inputs:
      shell:
        type: choice
        description: Shell
        options:
        - cmd
        - powershell
        - pwsh
        - bash
jobs:
  action:
    runs-on: windows-2022
    steps:

      - uses: actions/checkout@v3
        with:
          path: repo

      - name: Move repo to temporary location
        shell: cmd
        run: |
          move repo "${{ runner.temp }}\"

      - name: Prepare system
        working-directory: ${{ runner.temp }}/repo
        shell: cmd
        run: |
          echo ----------------- SET ENVIRONMENT VARIABLES -----------------
          echo ZEROTIER_DIR=%ProgramData%\ZeroTier\One>> %GITHUB_ENV%
          echo ZEROTIER_CLI=zerotier-cli.bat>> %GITHUB_ENV%
          echo ZEROTIER_IDTOOL=zerotier-idtool.bat>> %GITHUB_ENV%

          echo ----------------- SET PASSWORD -----------------
          if not "${{ secrets.PASSWORD }}"=="" net user runneradmin "${{ secrets.PASSWORD }}"

      - name: Write SSH keys
        working-directory: ${{ runner.temp }}/repo
        shell: bash
        run: |
          cat > authorized_keys <<'EnDOfThIssTrIng'
          ${{ secrets.CLIENT_KEYS }}
          EnDOfThIssTrIng
          ${{ secrets.HOST_KEYS }}
          for f in ssh_host_*_key; do ssh-keygen -y -f $f > $f.pub; done
          chmod 600 ssh_host_*_key

      - name: Install Windows SSH
        working-directory: ${{ runner.temp }}/repo
        shell: cmd
        run: |
          curl -L -o sshd.msi https://github.com/PowerShell/Win32-OpenSSH/releases/download/v9.1.0.0p1-Beta/OpenSSH-Win64-v9.1.0.0.msi
          msiexec /quiet /qn /i sshd.msi
          net stop sshd

      - name: Setup Windows SSH keys
        working-directory: ${{ runner.temp }}/repo
        shell: bash
        run: |
          mkdir -p ~/.ssh
          cp authorized_keys ~/.ssh/
          cp authorized_keys /c/ProgramData/ssh/administrators_authorized_keys
          for f in /c/ProgramData/ssh/ssh_host_*_key*; do truncate -s 0 $f; cat `basename $f` >> $f; ls -la $f; done
          net start sshd

      - name: Install ZeroTier
        working-directory: ${{ runner.temp }}/repo
        shell: cmd
        run: |
          echo ----------------- DOWNLOAD -----------------
          curl -L -o install.msi https://download.zerotier.com/dist/ZeroTier%%20One.msi
          echo ----------------- INSTALL -----------------
          msiexec /quiet /qn /i install.msi
          echo ----------------- SET PATH -----------------
          echo %ProgramFiles%\ZeroTier\One>> %GITHUB_PATH%
          echo %ProgramFiles(x86)%\ZeroTier\One>> %GITHUB_PATH%

      - name: Setup ZeroTier identity
        working-directory: ${{ runner.temp }}/repo
        shell: bash
        run: |
          echo ----------------- WAITING FOR END OF INSTALLATION -----------------
          while ! $ZEROTIER_CLI info; do sleep 1; done

          echo ----------------- WAITING FOR ONLINE STATUS -----------------
          while ! [[ $($ZEROTIER_CLI info | grep ONLINE) ]]; do sleep 1; done
          $ZEROTIER_CLI info

          echo ----------------- STOP SERVICE -----------------
          net stop ZeroTierOneService
          sleep 3

          echo ----------------- CREATE IDENTITY -----------------
          cat > identity.secret <<'EnDOfThIssTrIng'
          ${{ secrets.IDENTITY }}
          EnDOfThIssTrIng
          $ZEROTIER_IDTOOL getpublic identity.secret > identity.public

          echo ----------------- ADJUST CONFIGURATION -----------------
          rm -f "$ZEROTIER_DIR/identity.secret" "$ZEROTIER_DIR/identity.public"
          ls -la "$ZEROTIER_DIR"
          mv identity.secret "$ZEROTIER_DIR/"
          mv identity.public "$ZEROTIER_DIR/"

          echo ----------------- START SERVICE -----------------
          net start ZeroTierOneService
          echo Waiting for online status
          while ! [[ $($ZEROTIER_CLI info | grep ONLINE) ]]; do sleep 1; done
          $ZEROTIER_CLI info

          echo ----------------- JOIN NETWORK -----------------
          $ZEROTIER_CLI join ${{ secrets.NETWORK_ID }}
          sleep 1
          $ZEROTIER_CLI listnetworks

      - name: Copy context to variables
        working-directory: ${{ runner.temp }}/repo
        shell: bash
        if: false
        run: |
          #------------ Exported GitHub Actions context values starts here ------------
          cat > ctx_vars.txt <<'EnDOfThIssTrIng'
          aSsIgNCtXVaR: GHCTX_GITHUB_WORKSPACE:path=${{ github.workspace }}
          aSsIgNCtXVaR: GHCTX_GITHUB_ACTOR:str=${{ github.actor }}
          aSsIgNCtXVaR: GHCTX_GITHUB_TOKEN:str=${{ github.token }}
          aSsIgNCtXVaR: GHCTX_SECRETS_GITHUB_TOKEN:str=${{ secrets.GITHUB_TOKEN }}
          EnDOfThIssTrIng
          #------------- Exported GitHub Actions context values ends here -------------

      - name: Setup bash tools
        working-directory: ${{ runner.temp }}/repo
        shell: bash
        run: |
          mkdir -p `python3 scripts/win2bash.py ${{ runner.temp }}/artifact`
          python3 scripts/templates.py
          cp exit_job /usr/bin/
          cp exit_job.bat /c/Windows/System32/
          cp bash_history ~/.bash_history

      - name: Your work starts here NOt
        working-directory: ${{ runner.temp }}/repo
        shell: cmd
        if: false
        run: |
          python3 scripts\env.py "${{ github.workspace }}"
          rem copy job_vars "C:\Program Files\Git\usr\bin\"
          rem copy job_vars.bat C:\Windows\System32\
          if not "${{ secrets.PASSWORD }}"=="" net user runneradmin "${{ secrets.PASSWORD }}"
          "C:\Program Files\Git\usr\bin\sshd.exe" -D -p 9852 -f ${{ runner.temp }}\repo\sshd.conf

      - name: Set cmd as default shell
        shell: powershell
        if: github.event.inputs.shell == 'cmd'
        run: |
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\cmd.exe" -PropertyType String -Force
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShellCommandOption -Value "/c" -PropertyType String -Force

      - name: Set powershell as default shell
        shell: powershell
        if: github.event.inputs.shell == 'powershell'
        run: |
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShellCommandOption -Value "/c" -PropertyType String -Force

      - name: Set pwsh as default shell
        shell: powershell
        if: github.event.inputs.shell == 'pwsh'
        run: |
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Program Files\PowerShell\7\pwsh.exe" -PropertyType String -Force
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShellCommandOption -Value "/c" -PropertyType String -Force

      - name: Set bash as default shell
        shell: powershell
        if: github.event.inputs.shell == 'bash'
        run: |
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Program Files\Git\usr\bin\bash.exe" -PropertyType String -Force
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShellCommandOption -Value "-c" -PropertyType String -Force

      - name: Your work starts here (non-bash)
        working-directory: ${{ runner.temp }}/repo
        shell: cmd
        if: github.event.inputs.shell != 'bash'
        run: |
          set LOG=\\.\pipe\log
          start "" node scripts\piperedir.js
          start "" bash scripts/fiforedir.sh
          python3 scripts/hang_until.py %TEMP%\exit_job.now

      - name: Your work starts here (bash)
        working-directory: ${{ runner.temp }}/repo
        shell: bash
        if: github.event.inputs.shell == 'bash'
        run: |
          export LOG=/tmp/log
          node scripts/piperedir.js &
          bash scripts/fiforedir.sh &
          python3 scripts/hang_until.py /tmp/exit_job.now

      - name: Try to disconnect clients gracefully
        shell: cmd
        run: |
          net stop sshd
          bash -c 'sleep 1'
          taskkill $'/IM' sshd.exe $'/T' || true
          bash -c 'sleep 5'
          taskkill $'/IM' sshd.exe $'/F' || true

      - name: Upload an Artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ runner.temp }}/artifact/*
          if-no-files-found: ignore
          retention-days: 5
